version: "3.8"

services:
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: frontend
    restart: always
    ports:
      - "4555:80"
    depends_on:
      - traefik
    networks:
      - server
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${DOMAIN_NAME}`) && PathPrefix(`/`) && PathPrefix(`/login`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      - "traefik.http.routers.frontend.middlewares=redirect-to-non-www"
      - "traefik.http.middlewares.redirect-to-non-www.redirectregex.regex=^https?://www\\.(.*)"
      # - "traefik.http.middlewares.redirect-to-non-www.redirectregex.replacement=https://$1"
      # - "traefik.http.middlewares.redirect-to-non-www.redirectregex.replacement=https://\\$1"
      - "traefik.http.middlewares.redirect-to-non-www.redirectregex.replacement=https://$$1"
      - "traefik.http.middlewares.redirect-to-non-www.redirectregex.permanent=true"

  db:
    image: postgres:14-alpine
    restart: always
    environment:
      - POSTGRES_DB=app
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - db_data2:/var/lib/postgresql/data
    networks:
      - server

  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: backend
    restart: always
    depends_on:
      - db
      - traefik
    networks:
      - server
    environment:
      - DATABASE_URL=${DATABASE_URL}
    ports:
      - "8000:8000"
    # command: poetry run bash ./prestart.sh && poetry run uvicorn app.main:app --host 0.0.0.0 --port 8000
    # command: tail -f /dev/null
    command: poetry run uvicorn app.main:app --host 0.0.0.0 --port 8000
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`${DOMAIN_NAME}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls.certresolver=letsencrypt"
      - "traefik.http.routers.api.service=api"
      - "traefik.http.services.api.loadbalancer.server.port=8000"

      # Docs Router with Middleware for Path Rewrite let backend handle DOMAIN_NAME/docs by responding with the endpoint from the backend /api/docs
      - "traefik.http.routers.docs.rule=Host(`${DOMAIN_NAME}`) && PathPrefix(`/docs`)"
      - "traefik.http.routers.docs.entrypoints=websecure"
      - "traefik.http.routers.docs.service=api"
      - "traefik.http.middlewares.docs-rewrite.replacepathregex.regex=^/docs(.*)"
      - "traefik.http.middlewares.docs-rewrite.replacepathregex.replacement=/docs$${1}"
      - "traefik.http.routers.docs.middlewares=docs-rewrite"

  adminer:
    image: adminer
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.adminer.rule=Host(`db.${DOMAIN_NAME}`)"
      - "traefik.http.routers.adminer.entrypoints=websecure"
      - "traefik.http.routers.adminer.tls.certresolver=letsencrypt"
    networks:
      - server
    environment:
      - ADMINER_DEFAULT_SERVER=db
    depends_on:
      - db
      - traefik

  traefik:
    image: traefik:v2.5
    restart: always
    command:
      - "--api.insecure=${TRAEFIK_API_INSECURE}"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
    ports:
      - "80:80"
      - "443:443"
      - "8090:8080"
    depends_on:
      - db
    networks:
      - server
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - "./letsencrypt:/letsencrypt"
    labels:
      - "traefik.http.routers.traefik.rule=Host(`proxy.${DOMAIN_NAME}`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"

  proxy-manager:
    image: jc21/nginx-proxy-manager:latest
    restart: always
    container_name: proxy-manager
    ports:
      - "8091:81"
      # - "80:80"
      # - "443:443"
    environment:
      DB_SQLITE_FILE: "/data/database.sqlite"
    volumes:
      - ./proxy-data3:/data
      - ./letsencrypt3:/etc/letsencrypt
      # - ./custom_nginx.conf:/etc/nginx/conf.d/custom_nginx.conf:ro
    depends_on:
      - traefik
    networks:
      - server

networks:
  server:

volumes:
  db_data2:
