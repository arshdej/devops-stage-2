version: "3.8"

services:
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    image: frontend # if we don't give image name, traefik won't create router ü§∑‚Äç‚ôÇÔ∏è
    restart: always
    ports:
      - "4555:80"
    depends_on:
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${DOMAIN_NAME}`) && PathPrefix(`/`)"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.routers.frontend.tls.certresolver=letsencrypt"
      # - "traefik.http.routers.frontend.service=frontend"
      # - "traefik.http.services.frontend.loadbalancer.server.port=80"
      # - "traefik.http.routers.frontend.rule=PathPrefix(`/`)"

  db:
    image: postgres:13
    restart: always
    environment:
      POSTGRES_DB: hng
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - server

  backend:
    build:
      context: .
      dockerfile: ./Dockerfile.backend
    container_name: backend
    restart: always
    depends_on:
      - db
      - traefik
    environment:
      - DATABASE_URL=${DATABASE_URL}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`${DOMAIN_NAME}`) && PathPrefix(`/api`)"
      # - "traefik.http.routers.api.entrypoints=web"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.service=api"
      - "traefik.http.services.api.loadbalancer.server.port=8000"
      - "traefik.http.routers.docs.rule=Host(`${DOMAIN_NAME}`) && PathPrefix(`/docs`)"
      # - "traefik.http.routers.docs.entrypoints=web"
      - "traefik.http.routers.docs.entrypoints=websecure"
      - "traefik.http.routers.docs.service=api"
      - "traefik.http.routers.api.tls.certresolver=letsencrypt"
    # command: poetry run bash ./prestart.sh && poetry run uvicorn app.main:app --host 0.0.0.0 --port 8000
    command: tail -f /dev/null

  adminer:
    image: adminer
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.adminer.rule=Host(`db.${DOMAIN_NAME}`)"
      # - "traefik.http.services.adminer.loadbalancer.server.port=8080"
      - "traefik.http.routers.adminer.entrypoints=websecure"
      - "traefik.http.routers.adminer.tls.certresolver=letsencrypt"
    networks:
      - server
    depends_on:
      - db
      - traefik

  traefik:
    image: traefik:v3.0
    restart: always
    command:
      - "--api.insecure=${TRAEFIK_API_INSECURE}"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
    ports:
      - "80:80"
      - "443:443"
      - "${TRAEFIK_DASHBOARD_PORT}:8080"
    depends_on:
      - db
    networks:
      - server
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - "./letsencrypt:/letsencrypt"
    labels:
      - "traefik.http.routers.traefik.rule=Host(`${DOMAIN_NAME}`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"

  proxy-manager:
    image: jc21/nginx-proxy-manager:latest
    restart: always
    ports:
      - "8090:81"
    environment:
      DB_SQLITE_FILE: "/data/database.sqlite"
    volumes:
      - ./proxy-data:/data
      - ./letsencrypt:/etc/letsencrypt
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.proxy-manager.rule=Host(`proxy.localhost`)"
      - "traefik.http.routers.proxy-manager.entrypoints=websecure"
    depends_on:
      - traefik

networks:
  server:

volumes:
  postgres_data:
  letsencrypt: {}
